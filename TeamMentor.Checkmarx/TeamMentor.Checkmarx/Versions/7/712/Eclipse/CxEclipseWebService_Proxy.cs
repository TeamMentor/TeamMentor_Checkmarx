//O2Ref:System.Web.Services.dll
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5472
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.1432.
// 

namespace Checkmarx712Eclipse
{
/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="CxEclipseWebServiceSoap", Namespace="http://Checkmarx.com/v7")]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(WebClientUser))]
public partial class CxEclipseWebService_Proxy : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback LoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetQueryDescriptionOperationCompleted;
    
    private System.Threading.SendOrPostCallback VerifySupportedVersionOperationCompleted;
    
    private System.Threading.SendOrPostCallback LogoutOperationCompleted;
    
    private System.Threading.SendOrPostCallback SsoLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetPresetListOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetProjectConfigurationOperationCompleted;
    
    private System.Threading.SendOrPostCallback RunScanAndAddToProjectOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateAndRunProjectOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetResultsForQueryOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetResultPathOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetProjectsDisplayDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScansDisplayDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetQueriesForScanOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetFalsePositiveFlagOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetResultStateListOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAllUsersOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateSetOfResultStateOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateResultStateOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateProjectIncrementalConfigurationOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScansStatusesOperationCompleted;
    
    private System.Threading.SendOrPostCallback IsValidProjectNameOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAssociatedGroupsListOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetConfigurationSetListOperationCompleted;
    
    private System.Threading.SendOrPostCallback CancelScanOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetStatusOfSingleScanOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateScanReportOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScanReportStatusOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScanReportOperationCompleted;
    
    /// <remarks/>
    public CxEclipseWebService_Proxy(string url) {
        //this.Url = "http://174.129.243.209/CxWebInterface/Eclipse/CxEclipseWebService.asmx";
		this.Url = url;
    }
    
    /// <remarks/>
    public event LoginCompletedEventHandler LoginCompleted;
    
    /// <remarks/>
    public event GetQueryDescriptionCompletedEventHandler GetQueryDescriptionCompleted;
    
    /// <remarks/>
    public event VerifySupportedVersionCompletedEventHandler VerifySupportedVersionCompleted;
    
    /// <remarks/>
    public event LogoutCompletedEventHandler LogoutCompleted;
    
    /// <remarks/>
    public event SsoLoginCompletedEventHandler SsoLoginCompleted;
    
    /// <remarks/>
    public event GetPresetListCompletedEventHandler GetPresetListCompleted;
    
    /// <remarks/>
    public event GetProjectConfigurationCompletedEventHandler GetProjectConfigurationCompleted;
    
    /// <remarks/>
    public event RunScanAndAddToProjectCompletedEventHandler RunScanAndAddToProjectCompleted;
    
    /// <remarks/>
    public event CreateAndRunProjectCompletedEventHandler CreateAndRunProjectCompleted;
    
    /// <remarks/>
    public event GetResultsForQueryCompletedEventHandler GetResultsForQueryCompleted;
    
    /// <remarks/>
    public event GetResultPathCompletedEventHandler GetResultPathCompleted;
    
    /// <remarks/>
    public event GetProjectsDisplayDataCompletedEventHandler GetProjectsDisplayDataCompleted;
    
    /// <remarks/>
    public event GetScansDisplayDataCompletedEventHandler GetScansDisplayDataCompleted;
    
    /// <remarks/>
    public event GetQueriesForScanCompletedEventHandler GetQueriesForScanCompleted;
    
    /// <remarks/>
    public event SetFalsePositiveFlagCompletedEventHandler SetFalsePositiveFlagCompleted;
    
    /// <remarks/>
    public event GetResultStateListCompletedEventHandler GetResultStateListCompleted;
    
    /// <remarks/>
    public event GetAllUsersCompletedEventHandler GetAllUsersCompleted;
    
    /// <remarks/>
    public event UpdateSetOfResultStateCompletedEventHandler UpdateSetOfResultStateCompleted;
    
    /// <remarks/>
    public event UpdateResultStateCompletedEventHandler UpdateResultStateCompleted;
    
    /// <remarks/>
    public event UpdateProjectIncrementalConfigurationCompletedEventHandler UpdateProjectIncrementalConfigurationCompleted;
    
    /// <remarks/>
    public event GetScansStatusesCompletedEventHandler GetScansStatusesCompleted;
    
    /// <remarks/>
    public event IsValidProjectNameCompletedEventHandler IsValidProjectNameCompleted;
    
    /// <remarks/>
    public event GetAssociatedGroupsListCompletedEventHandler GetAssociatedGroupsListCompleted;
    
    /// <remarks/>
    public event GetConfigurationSetListCompletedEventHandler GetConfigurationSetListCompleted;
    
    /// <remarks/>
    public event CancelScanCompletedEventHandler CancelScanCompleted;
    
    /// <remarks/>
    public event GetStatusOfSingleScanCompletedEventHandler GetStatusOfSingleScanCompleted;
    
    /// <remarks/>
    public event CreateScanReportCompletedEventHandler CreateScanReportCompleted;
    
    /// <remarks/>
    public event GetScanReportStatusCompletedEventHandler GetScanReportStatusCompleted;
    
    /// <remarks/>
    public event GetScanReportCompletedEventHandler GetScanReportCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/Login", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseLoginData Login(Credentials applicationCredentials, int lcid) {
        object[] results = this.Invoke("Login", new object[] {
                    applicationCredentials,
                    lcid});
        return ((CxWSResponseLoginData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLogin(Credentials applicationCredentials, int lcid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Login", new object[] {
                    applicationCredentials,
                    lcid}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseLoginData EndLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseLoginData)(results[0]));
    }
    
    /// <remarks/>
    public void LoginAsync(Credentials applicationCredentials, int lcid) {
        this.LoginAsync(applicationCredentials, lcid, null);
    }
    
    /// <remarks/>
    public void LoginAsync(Credentials applicationCredentials, int lcid, object userState) {
        if ((this.LoginOperationCompleted == null)) {
            this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
        }
        this.InvokeAsync("Login", new object[] {
                    applicationCredentials,
                    lcid}, this.LoginOperationCompleted, userState);
    }
    
    private void OnLoginOperationCompleted(object arg) {
        if ((this.LoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/GetQueryDescription", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseQueryDescription GetQueryDescription(string sessionId, int cweId) {
        object[] results = this.Invoke("GetQueryDescription", new object[] {
                    sessionId,
                    cweId});
        return ((CxWSResponseQueryDescription)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetQueryDescription(string sessionId, int cweId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetQueryDescription", new object[] {
                    sessionId,
                    cweId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseQueryDescription EndGetQueryDescription(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseQueryDescription)(results[0]));
    }
    
    /// <remarks/>
    public void GetQueryDescriptionAsync(string sessionId, int cweId) {
        this.GetQueryDescriptionAsync(sessionId, cweId, null);
    }
    
    /// <remarks/>
    public void GetQueryDescriptionAsync(string sessionId, int cweId, object userState) {
        if ((this.GetQueryDescriptionOperationCompleted == null)) {
            this.GetQueryDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryDescriptionOperationCompleted);
        }
        this.InvokeAsync("GetQueryDescription", new object[] {
                    sessionId,
                    cweId}, this.GetQueryDescriptionOperationCompleted, userState);
    }
    
    private void OnGetQueryDescriptionOperationCompleted(object arg) {
        if ((this.GetQueryDescriptionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetQueryDescriptionCompleted(this, new GetQueryDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/VerifySupportedVersion", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse VerifySupportedVersion(CxClientType clientType, string clientVersion, string APIVersion) {
        object[] results = this.Invoke("VerifySupportedVersion", new object[] {
                    clientType,
                    clientVersion,
                    APIVersion});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginVerifySupportedVersion(CxClientType clientType, string clientVersion, string APIVersion, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("VerifySupportedVersion", new object[] {
                    clientType,
                    clientVersion,
                    APIVersion}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndVerifySupportedVersion(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void VerifySupportedVersionAsync(CxClientType clientType, string clientVersion, string APIVersion) {
        this.VerifySupportedVersionAsync(clientType, clientVersion, APIVersion, null);
    }
    
    /// <remarks/>
    public void VerifySupportedVersionAsync(CxClientType clientType, string clientVersion, string APIVersion, object userState) {
        if ((this.VerifySupportedVersionOperationCompleted == null)) {
            this.VerifySupportedVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifySupportedVersionOperationCompleted);
        }
        this.InvokeAsync("VerifySupportedVersion", new object[] {
                    clientType,
                    clientVersion,
                    APIVersion}, this.VerifySupportedVersionOperationCompleted, userState);
    }
    
    private void OnVerifySupportedVersionOperationCompleted(object arg) {
        if ((this.VerifySupportedVersionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.VerifySupportedVersionCompleted(this, new VerifySupportedVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/Logout", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse Logout(string sessionID) {
        object[] results = this.Invoke("Logout", new object[] {
                    sessionID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLogout(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Logout", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndLogout(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void LogoutAsync(string sessionID) {
        this.LogoutAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void LogoutAsync(string sessionID, object userState) {
        if ((this.LogoutOperationCompleted == null)) {
            this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutOperationCompleted);
        }
        this.InvokeAsync("Logout", new object[] {
                    sessionID}, this.LogoutOperationCompleted, userState);
    }
    
    private void OnLogoutOperationCompleted(object arg) {
        if ((this.LogoutCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LogoutCompleted(this, new LogoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/SsoLogin", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseLoginData SsoLogin(Credentials encryptedCredentials, int lcid) {
        object[] results = this.Invoke("SsoLogin", new object[] {
                    encryptedCredentials,
                    lcid});
        return ((CxWSResponseLoginData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSsoLogin(Credentials encryptedCredentials, int lcid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SsoLogin", new object[] {
                    encryptedCredentials,
                    lcid}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseLoginData EndSsoLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseLoginData)(results[0]));
    }
    
    /// <remarks/>
    public void SsoLoginAsync(Credentials encryptedCredentials, int lcid) {
        this.SsoLoginAsync(encryptedCredentials, lcid, null);
    }
    
    /// <remarks/>
    public void SsoLoginAsync(Credentials encryptedCredentials, int lcid, object userState) {
        if ((this.SsoLoginOperationCompleted == null)) {
            this.SsoLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSsoLoginOperationCompleted);
        }
        this.InvokeAsync("SsoLogin", new object[] {
                    encryptedCredentials,
                    lcid}, this.SsoLoginOperationCompleted, userState);
    }
    
    private void OnSsoLoginOperationCompleted(object arg) {
        if ((this.SsoLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SsoLoginCompleted(this, new SsoLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/GetPresetList", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponsePresetList GetPresetList(string SessionID) {
        object[] results = this.Invoke("GetPresetList", new object[] {
                    SessionID});
        return ((CxWSResponsePresetList)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPresetList(string SessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPresetList", new object[] {
                    SessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponsePresetList EndGetPresetList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponsePresetList)(results[0]));
    }
    
    /// <remarks/>
    public void GetPresetListAsync(string SessionID) {
        this.GetPresetListAsync(SessionID, null);
    }
    
    /// <remarks/>
    public void GetPresetListAsync(string SessionID, object userState) {
        if ((this.GetPresetListOperationCompleted == null)) {
            this.GetPresetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPresetListOperationCompleted);
        }
        this.InvokeAsync("GetPresetList", new object[] {
                    SessionID}, this.GetPresetListOperationCompleted, userState);
    }
    
    private void OnGetPresetListOperationCompleted(object arg) {
        if ((this.GetPresetListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetPresetListCompleted(this, new GetPresetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/GetProjectConfiguration", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseProjectConfig GetProjectConfiguration(string sessionID, long projectID) {
        object[] results = this.Invoke("GetProjectConfiguration", new object[] {
                    sessionID,
                    projectID});
        return ((CxWSResponseProjectConfig)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetProjectConfiguration(string sessionID, long projectID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetProjectConfiguration", new object[] {
                    sessionID,
                    projectID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseProjectConfig EndGetProjectConfiguration(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseProjectConfig)(results[0]));
    }
    
    /// <remarks/>
    public void GetProjectConfigurationAsync(string sessionID, long projectID) {
        this.GetProjectConfigurationAsync(sessionID, projectID, null);
    }
    
    /// <remarks/>
    public void GetProjectConfigurationAsync(string sessionID, long projectID, object userState) {
        if ((this.GetProjectConfigurationOperationCompleted == null)) {
            this.GetProjectConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectConfigurationOperationCompleted);
        }
        this.InvokeAsync("GetProjectConfiguration", new object[] {
                    sessionID,
                    projectID}, this.GetProjectConfigurationOperationCompleted, userState);
    }
    
    private void OnGetProjectConfigurationOperationCompleted(object arg) {
        if ((this.GetProjectConfigurationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetProjectConfigurationCompleted(this, new GetProjectConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/RunScanAndAddToProject", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseRunID RunScanAndAddToProject(string sessionId, ProjectSettings projectSettings, LocalCodeContainer localCodeContainer, bool visibleToUtherUsers) {
        object[] results = this.Invoke("RunScanAndAddToProject", new object[] {
                    sessionId,
                    projectSettings,
                    localCodeContainer,
                    visibleToUtherUsers});
        return ((CxWSResponseRunID)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRunScanAndAddToProject(string sessionId, ProjectSettings projectSettings, LocalCodeContainer localCodeContainer, bool visibleToUtherUsers, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RunScanAndAddToProject", new object[] {
                    sessionId,
                    projectSettings,
                    localCodeContainer,
                    visibleToUtherUsers}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseRunID EndRunScanAndAddToProject(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseRunID)(results[0]));
    }
    
    /// <remarks/>
    public void RunScanAndAddToProjectAsync(string sessionId, ProjectSettings projectSettings, LocalCodeContainer localCodeContainer, bool visibleToUtherUsers) {
        this.RunScanAndAddToProjectAsync(sessionId, projectSettings, localCodeContainer, visibleToUtherUsers, null);
    }
    
    /// <remarks/>
    public void RunScanAndAddToProjectAsync(string sessionId, ProjectSettings projectSettings, LocalCodeContainer localCodeContainer, bool visibleToUtherUsers, object userState) {
        if ((this.RunScanAndAddToProjectOperationCompleted == null)) {
            this.RunScanAndAddToProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunScanAndAddToProjectOperationCompleted);
        }
        this.InvokeAsync("RunScanAndAddToProject", new object[] {
                    sessionId,
                    projectSettings,
                    localCodeContainer,
                    visibleToUtherUsers}, this.RunScanAndAddToProjectOperationCompleted, userState);
    }
    
    private void OnRunScanAndAddToProjectOperationCompleted(object arg) {
        if ((this.RunScanAndAddToProjectCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RunScanAndAddToProjectCompleted(this, new RunScanAndAddToProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/CreateAndRunProject", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseRunID CreateAndRunProject(string SessionID, ProjectSettings ProjectSettings, LocalCodeContainer LocalCodeContainer, bool visibleToOtherUsers) {
        object[] results = this.Invoke("CreateAndRunProject", new object[] {
                    SessionID,
                    ProjectSettings,
                    LocalCodeContainer,
                    visibleToOtherUsers});
        return ((CxWSResponseRunID)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateAndRunProject(string SessionID, ProjectSettings ProjectSettings, LocalCodeContainer LocalCodeContainer, bool visibleToOtherUsers, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateAndRunProject", new object[] {
                    SessionID,
                    ProjectSettings,
                    LocalCodeContainer,
                    visibleToOtherUsers}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseRunID EndCreateAndRunProject(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseRunID)(results[0]));
    }
    
    /// <remarks/>
    public void CreateAndRunProjectAsync(string SessionID, ProjectSettings ProjectSettings, LocalCodeContainer LocalCodeContainer, bool visibleToOtherUsers) {
        this.CreateAndRunProjectAsync(SessionID, ProjectSettings, LocalCodeContainer, visibleToOtherUsers, null);
    }
    
    /// <remarks/>
    public void CreateAndRunProjectAsync(string SessionID, ProjectSettings ProjectSettings, LocalCodeContainer LocalCodeContainer, bool visibleToOtherUsers, object userState) {
        if ((this.CreateAndRunProjectOperationCompleted == null)) {
            this.CreateAndRunProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateAndRunProjectOperationCompleted);
        }
        this.InvokeAsync("CreateAndRunProject", new object[] {
                    SessionID,
                    ProjectSettings,
                    LocalCodeContainer,
                    visibleToOtherUsers}, this.CreateAndRunProjectOperationCompleted, userState);
    }
    
    private void OnCreateAndRunProjectOperationCompleted(object arg) {
        if ((this.CreateAndRunProjectCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateAndRunProjectCompleted(this, new CreateAndRunProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/GetResultsForQuery", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponceScanResults GetResultsForQuery(string sessionID, long scanId, long queryId) {
        object[] results = this.Invoke("GetResultsForQuery", new object[] {
                    sessionID,
                    scanId,
                    queryId});
        return ((CxWSResponceScanResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetResultsForQuery(string sessionID, long scanId, long queryId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetResultsForQuery", new object[] {
                    sessionID,
                    scanId,
                    queryId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponceScanResults EndGetResultsForQuery(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponceScanResults)(results[0]));
    }
    
    /// <remarks/>
    public void GetResultsForQueryAsync(string sessionID, long scanId, long queryId) {
        this.GetResultsForQueryAsync(sessionID, scanId, queryId, null);
    }
    
    /// <remarks/>
    public void GetResultsForQueryAsync(string sessionID, long scanId, long queryId, object userState) {
        if ((this.GetResultsForQueryOperationCompleted == null)) {
            this.GetResultsForQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultsForQueryOperationCompleted);
        }
        this.InvokeAsync("GetResultsForQuery", new object[] {
                    sessionID,
                    scanId,
                    queryId}, this.GetResultsForQueryOperationCompleted, userState);
    }
    
    private void OnGetResultsForQueryOperationCompleted(object arg) {
        if ((this.GetResultsForQueryCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetResultsForQueryCompleted(this, new GetResultsForQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/GetResultPath", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponceResultPath GetResultPath(string sessionId, long scanId, long pathId) {
        object[] results = this.Invoke("GetResultPath", new object[] {
                    sessionId,
                    scanId,
                    pathId});
        return ((CxWSResponceResultPath)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetResultPath(string sessionId, long scanId, long pathId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetResultPath", new object[] {
                    sessionId,
                    scanId,
                    pathId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponceResultPath EndGetResultPath(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponceResultPath)(results[0]));
    }
    
    /// <remarks/>
    public void GetResultPathAsync(string sessionId, long scanId, long pathId) {
        this.GetResultPathAsync(sessionId, scanId, pathId, null);
    }
    
    /// <remarks/>
    public void GetResultPathAsync(string sessionId, long scanId, long pathId, object userState) {
        if ((this.GetResultPathOperationCompleted == null)) {
            this.GetResultPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultPathOperationCompleted);
        }
        this.InvokeAsync("GetResultPath", new object[] {
                    sessionId,
                    scanId,
                    pathId}, this.GetResultPathOperationCompleted, userState);
    }
    
    private void OnGetResultPathOperationCompleted(object arg) {
        if ((this.GetResultPathCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetResultPathCompleted(this, new GetResultPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/GetProjectsDisplayData", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseProjectsDisplayData GetProjectsDisplayData(string sessionID) {
        object[] results = this.Invoke("GetProjectsDisplayData", new object[] {
                    sessionID});
        return ((CxWSResponseProjectsDisplayData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetProjectsDisplayData(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetProjectsDisplayData", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseProjectsDisplayData EndGetProjectsDisplayData(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseProjectsDisplayData)(results[0]));
    }
    
    /// <remarks/>
    public void GetProjectsDisplayDataAsync(string sessionID) {
        this.GetProjectsDisplayDataAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetProjectsDisplayDataAsync(string sessionID, object userState) {
        if ((this.GetProjectsDisplayDataOperationCompleted == null)) {
            this.GetProjectsDisplayDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectsDisplayDataOperationCompleted);
        }
        this.InvokeAsync("GetProjectsDisplayData", new object[] {
                    sessionID}, this.GetProjectsDisplayDataOperationCompleted, userState);
    }
    
    private void OnGetProjectsDisplayDataOperationCompleted(object arg) {
        if ((this.GetProjectsDisplayDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetProjectsDisplayDataCompleted(this, new GetProjectsDisplayDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/GetScansDisplayData", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScansDisplayData GetScansDisplayData(string sessionID, long projectID) {
        object[] results = this.Invoke("GetScansDisplayData", new object[] {
                    sessionID,
                    projectID});
        return ((CxWSResponseScansDisplayData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScansDisplayData(string sessionID, long projectID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScansDisplayData", new object[] {
                    sessionID,
                    projectID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScansDisplayData EndGetScansDisplayData(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScansDisplayData)(results[0]));
    }
    
    /// <remarks/>
    public void GetScansDisplayDataAsync(string sessionID, long projectID) {
        this.GetScansDisplayDataAsync(sessionID, projectID, null);
    }
    
    /// <remarks/>
    public void GetScansDisplayDataAsync(string sessionID, long projectID, object userState) {
        if ((this.GetScansDisplayDataOperationCompleted == null)) {
            this.GetScansDisplayDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScansDisplayDataOperationCompleted);
        }
        this.InvokeAsync("GetScansDisplayData", new object[] {
                    sessionID,
                    projectID}, this.GetScansDisplayDataOperationCompleted, userState);
    }
    
    private void OnGetScansDisplayDataOperationCompleted(object arg) {
        if ((this.GetScansDisplayDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScansDisplayDataCompleted(this, new GetScansDisplayDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/GetQueriesForScan", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponceQuerisForScan GetQueriesForScan(string sessionID, long scanId) {
        object[] results = this.Invoke("GetQueriesForScan", new object[] {
                    sessionID,
                    scanId});
        return ((CxWSResponceQuerisForScan)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetQueriesForScan(string sessionID, long scanId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetQueriesForScan", new object[] {
                    sessionID,
                    scanId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponceQuerisForScan EndGetQueriesForScan(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponceQuerisForScan)(results[0]));
    }
    
    /// <remarks/>
    public void GetQueriesForScanAsync(string sessionID, long scanId) {
        this.GetQueriesForScanAsync(sessionID, scanId, null);
    }
    
    /// <remarks/>
    public void GetQueriesForScanAsync(string sessionID, long scanId, object userState) {
        if ((this.GetQueriesForScanOperationCompleted == null)) {
            this.GetQueriesForScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueriesForScanOperationCompleted);
        }
        this.InvokeAsync("GetQueriesForScan", new object[] {
                    sessionID,
                    scanId}, this.GetQueriesForScanOperationCompleted, userState);
    }
    
    private void OnGetQueriesForScanOperationCompleted(object arg) {
        if ((this.GetQueriesForScanCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetQueriesForScanCompleted(this, new GetQueriesForScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/SetFalsePositiveFlag", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse SetFalsePositiveFlag(string sessionID, long ResultId, long PathId, long projectId, bool falsePositiveFlag) {
        object[] results = this.Invoke("SetFalsePositiveFlag", new object[] {
                    sessionID,
                    ResultId,
                    PathId,
                    projectId,
                    falsePositiveFlag});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetFalsePositiveFlag(string sessionID, long ResultId, long PathId, long projectId, bool falsePositiveFlag, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetFalsePositiveFlag", new object[] {
                    sessionID,
                    ResultId,
                    PathId,
                    projectId,
                    falsePositiveFlag}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndSetFalsePositiveFlag(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void SetFalsePositiveFlagAsync(string sessionID, long ResultId, long PathId, long projectId, bool falsePositiveFlag) {
        this.SetFalsePositiveFlagAsync(sessionID, ResultId, PathId, projectId, falsePositiveFlag, null);
    }
    
    /// <remarks/>
    public void SetFalsePositiveFlagAsync(string sessionID, long ResultId, long PathId, long projectId, bool falsePositiveFlag, object userState) {
        if ((this.SetFalsePositiveFlagOperationCompleted == null)) {
            this.SetFalsePositiveFlagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFalsePositiveFlagOperationCompleted);
        }
        this.InvokeAsync("SetFalsePositiveFlag", new object[] {
                    sessionID,
                    ResultId,
                    PathId,
                    projectId,
                    falsePositiveFlag}, this.SetFalsePositiveFlagOperationCompleted, userState);
    }
    
    private void OnSetFalsePositiveFlagOperationCompleted(object arg) {
        if ((this.SetFalsePositiveFlagCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetFalsePositiveFlagCompleted(this, new SetFalsePositiveFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/GetResultStateList", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseResultStateList GetResultStateList(string sessionID) {
        object[] results = this.Invoke("GetResultStateList", new object[] {
                    sessionID});
        return ((CxWSResponseResultStateList)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetResultStateList(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetResultStateList", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseResultStateList EndGetResultStateList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseResultStateList)(results[0]));
    }
    
    /// <remarks/>
    public void GetResultStateListAsync(string sessionID) {
        this.GetResultStateListAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetResultStateListAsync(string sessionID, object userState) {
        if ((this.GetResultStateListOperationCompleted == null)) {
            this.GetResultStateListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultStateListOperationCompleted);
        }
        this.InvokeAsync("GetResultStateList", new object[] {
                    sessionID}, this.GetResultStateListOperationCompleted, userState);
    }
    
    private void OnGetResultStateListOperationCompleted(object arg) {
        if ((this.GetResultStateListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetResultStateListCompleted(this, new GetResultStateListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/GetAllUsers", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseUserData GetAllUsers(string sessionID) {
        object[] results = this.Invoke("GetAllUsers", new object[] {
                    sessionID});
        return ((CxWSResponseUserData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAllUsers(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAllUsers", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseUserData EndGetAllUsers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseUserData)(results[0]));
    }
    
    /// <remarks/>
    public void GetAllUsersAsync(string sessionID) {
        this.GetAllUsersAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetAllUsersAsync(string sessionID, object userState) {
        if ((this.GetAllUsersOperationCompleted == null)) {
            this.GetAllUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUsersOperationCompleted);
        }
        this.InvokeAsync("GetAllUsers", new object[] {
                    sessionID}, this.GetAllUsersOperationCompleted, userState);
    }
    
    private void OnGetAllUsersOperationCompleted(object arg) {
        if ((this.GetAllUsersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAllUsersCompleted(this, new GetAllUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/UpdateSetOfResultState", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse UpdateSetOfResultState(string sessionID, ResultStateData[] resultsStates) {
        object[] results = this.Invoke("UpdateSetOfResultState", new object[] {
                    sessionID,
                    resultsStates});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateSetOfResultState(string sessionID, ResultStateData[] resultsStates, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateSetOfResultState", new object[] {
                    sessionID,
                    resultsStates}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndUpdateSetOfResultState(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateSetOfResultStateAsync(string sessionID, ResultStateData[] resultsStates) {
        this.UpdateSetOfResultStateAsync(sessionID, resultsStates, null);
    }
    
    /// <remarks/>
    public void UpdateSetOfResultStateAsync(string sessionID, ResultStateData[] resultsStates, object userState) {
        if ((this.UpdateSetOfResultStateOperationCompleted == null)) {
            this.UpdateSetOfResultStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSetOfResultStateOperationCompleted);
        }
        this.InvokeAsync("UpdateSetOfResultState", new object[] {
                    sessionID,
                    resultsStates}, this.UpdateSetOfResultStateOperationCompleted, userState);
    }
    
    private void OnUpdateSetOfResultStateOperationCompleted(object arg) {
        if ((this.UpdateSetOfResultStateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateSetOfResultStateCompleted(this, new UpdateSetOfResultStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/UpdateResultState", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse UpdateResultState(string sessionID, long scanId, long PathId, long projectId, string Remarks, int ResultLabelType, string data) {
        object[] results = this.Invoke("UpdateResultState", new object[] {
                    sessionID,
                    scanId,
                    PathId,
                    projectId,
                    Remarks,
                    ResultLabelType,
                    data});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateResultState(string sessionID, long scanId, long PathId, long projectId, string Remarks, int ResultLabelType, string data, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateResultState", new object[] {
                    sessionID,
                    scanId,
                    PathId,
                    projectId,
                    Remarks,
                    ResultLabelType,
                    data}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndUpdateResultState(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateResultStateAsync(string sessionID, long scanId, long PathId, long projectId, string Remarks, int ResultLabelType, string data) {
        this.UpdateResultStateAsync(sessionID, scanId, PathId, projectId, Remarks, ResultLabelType, data, null);
    }
    
    /// <remarks/>
    public void UpdateResultStateAsync(string sessionID, long scanId, long PathId, long projectId, string Remarks, int ResultLabelType, string data, object userState) {
        if ((this.UpdateResultStateOperationCompleted == null)) {
            this.UpdateResultStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateResultStateOperationCompleted);
        }
        this.InvokeAsync("UpdateResultState", new object[] {
                    sessionID,
                    scanId,
                    PathId,
                    projectId,
                    Remarks,
                    ResultLabelType,
                    data}, this.UpdateResultStateOperationCompleted, userState);
    }
    
    private void OnUpdateResultStateOperationCompleted(object arg) {
        if ((this.UpdateResultStateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateResultStateCompleted(this, new UpdateResultStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/UpdateProjectIncrementalConfiguration", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse UpdateProjectIncrementalConfiguration(string sessionID, long projectID, ProjectConfiguration projectConfiguration) {
        object[] results = this.Invoke("UpdateProjectIncrementalConfiguration", new object[] {
                    sessionID,
                    projectID,
                    projectConfiguration});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateProjectIncrementalConfiguration(string sessionID, long projectID, ProjectConfiguration projectConfiguration, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateProjectIncrementalConfiguration", new object[] {
                    sessionID,
                    projectID,
                    projectConfiguration}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndUpdateProjectIncrementalConfiguration(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateProjectIncrementalConfigurationAsync(string sessionID, long projectID, ProjectConfiguration projectConfiguration) {
        this.UpdateProjectIncrementalConfigurationAsync(sessionID, projectID, projectConfiguration, null);
    }
    
    /// <remarks/>
    public void UpdateProjectIncrementalConfigurationAsync(string sessionID, long projectID, ProjectConfiguration projectConfiguration, object userState) {
        if ((this.UpdateProjectIncrementalConfigurationOperationCompleted == null)) {
            this.UpdateProjectIncrementalConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateProjectIncrementalConfigurationOperationCompleted);
        }
        this.InvokeAsync("UpdateProjectIncrementalConfiguration", new object[] {
                    sessionID,
                    projectID,
                    projectConfiguration}, this.UpdateProjectIncrementalConfigurationOperationCompleted, userState);
    }
    
    private void OnUpdateProjectIncrementalConfigurationOperationCompleted(object arg) {
        if ((this.UpdateProjectIncrementalConfigurationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateProjectIncrementalConfigurationCompleted(this, new UpdateProjectIncrementalConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/GetScansStatuses", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScanStatusArray GetScansStatuses(string sessionID) {
        object[] results = this.Invoke("GetScansStatuses", new object[] {
                    sessionID});
        return ((CxWSResponseScanStatusArray)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScansStatuses(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScansStatuses", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScanStatusArray EndGetScansStatuses(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScanStatusArray)(results[0]));
    }
    
    /// <remarks/>
    public void GetScansStatusesAsync(string sessionID) {
        this.GetScansStatusesAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetScansStatusesAsync(string sessionID, object userState) {
        if ((this.GetScansStatusesOperationCompleted == null)) {
            this.GetScansStatusesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScansStatusesOperationCompleted);
        }
        this.InvokeAsync("GetScansStatuses", new object[] {
                    sessionID}, this.GetScansStatusesOperationCompleted, userState);
    }
    
    private void OnGetScansStatusesOperationCompleted(object arg) {
        if ((this.GetScansStatusesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScansStatusesCompleted(this, new GetScansStatusesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/IsValidProjectName", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse IsValidProjectName(string SessionID, string ProjectName, string GroupId) {
        object[] results = this.Invoke("IsValidProjectName", new object[] {
                    SessionID,
                    ProjectName,
                    GroupId});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIsValidProjectName(string SessionID, string ProjectName, string GroupId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsValidProjectName", new object[] {
                    SessionID,
                    ProjectName,
                    GroupId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndIsValidProjectName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void IsValidProjectNameAsync(string SessionID, string ProjectName, string GroupId) {
        this.IsValidProjectNameAsync(SessionID, ProjectName, GroupId, null);
    }
    
    /// <remarks/>
    public void IsValidProjectNameAsync(string SessionID, string ProjectName, string GroupId, object userState) {
        if ((this.IsValidProjectNameOperationCompleted == null)) {
            this.IsValidProjectNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidProjectNameOperationCompleted);
        }
        this.InvokeAsync("IsValidProjectName", new object[] {
                    SessionID,
                    ProjectName,
                    GroupId}, this.IsValidProjectNameOperationCompleted, userState);
    }
    
    private void OnIsValidProjectNameOperationCompleted(object arg) {
        if ((this.IsValidProjectNameCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IsValidProjectNameCompleted(this, new IsValidProjectNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/GetAssociatedGroupsList", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseGroupList GetAssociatedGroupsList(string SessionID) {
        object[] results = this.Invoke("GetAssociatedGroupsList", new object[] {
                    SessionID});
        return ((CxWSResponseGroupList)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAssociatedGroupsList(string SessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAssociatedGroupsList", new object[] {
                    SessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseGroupList EndGetAssociatedGroupsList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseGroupList)(results[0]));
    }
    
    /// <remarks/>
    public void GetAssociatedGroupsListAsync(string SessionID) {
        this.GetAssociatedGroupsListAsync(SessionID, null);
    }
    
    /// <remarks/>
    public void GetAssociatedGroupsListAsync(string SessionID, object userState) {
        if ((this.GetAssociatedGroupsListOperationCompleted == null)) {
            this.GetAssociatedGroupsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssociatedGroupsListOperationCompleted);
        }
        this.InvokeAsync("GetAssociatedGroupsList", new object[] {
                    SessionID}, this.GetAssociatedGroupsListOperationCompleted, userState);
    }
    
    private void OnGetAssociatedGroupsListOperationCompleted(object arg) {
        if ((this.GetAssociatedGroupsListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAssociatedGroupsListCompleted(this, new GetAssociatedGroupsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/GetConfigurationSetList", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseConfigSetList GetConfigurationSetList(string SessionID) {
        object[] results = this.Invoke("GetConfigurationSetList", new object[] {
                    SessionID});
        return ((CxWSResponseConfigSetList)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetConfigurationSetList(string SessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetConfigurationSetList", new object[] {
                    SessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseConfigSetList EndGetConfigurationSetList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseConfigSetList)(results[0]));
    }
    
    /// <remarks/>
    public void GetConfigurationSetListAsync(string SessionID) {
        this.GetConfigurationSetListAsync(SessionID, null);
    }
    
    /// <remarks/>
    public void GetConfigurationSetListAsync(string SessionID, object userState) {
        if ((this.GetConfigurationSetListOperationCompleted == null)) {
            this.GetConfigurationSetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConfigurationSetListOperationCompleted);
        }
        this.InvokeAsync("GetConfigurationSetList", new object[] {
                    SessionID}, this.GetConfigurationSetListOperationCompleted, userState);
    }
    
    private void OnGetConfigurationSetListOperationCompleted(object arg) {
        if ((this.GetConfigurationSetListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetConfigurationSetListCompleted(this, new GetConfigurationSetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/CancelScan", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse CancelScan(string sessionID, string RunId) {
        object[] results = this.Invoke("CancelScan", new object[] {
                    sessionID,
                    RunId});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCancelScan(string sessionID, string RunId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CancelScan", new object[] {
                    sessionID,
                    RunId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndCancelScan(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void CancelScanAsync(string sessionID, string RunId) {
        this.CancelScanAsync(sessionID, RunId, null);
    }
    
    /// <remarks/>
    public void CancelScanAsync(string sessionID, string RunId, object userState) {
        if ((this.CancelScanOperationCompleted == null)) {
            this.CancelScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelScanOperationCompleted);
        }
        this.InvokeAsync("CancelScan", new object[] {
                    sessionID,
                    RunId}, this.CancelScanOperationCompleted, userState);
    }
    
    private void OnCancelScanOperationCompleted(object arg) {
        if ((this.CancelScanCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CancelScanCompleted(this, new CancelScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/GetStatusOfSingleScan", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScanStatus GetStatusOfSingleScan(string sessionID, string runId) {
        object[] results = this.Invoke("GetStatusOfSingleScan", new object[] {
                    sessionID,
                    runId});
        return ((CxWSResponseScanStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetStatusOfSingleScan(string sessionID, string runId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetStatusOfSingleScan", new object[] {
                    sessionID,
                    runId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScanStatus EndGetStatusOfSingleScan(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScanStatus)(results[0]));
    }
    
    /// <remarks/>
    public void GetStatusOfSingleScanAsync(string sessionID, string runId) {
        this.GetStatusOfSingleScanAsync(sessionID, runId, null);
    }
    
    /// <remarks/>
    public void GetStatusOfSingleScanAsync(string sessionID, string runId, object userState) {
        if ((this.GetStatusOfSingleScanOperationCompleted == null)) {
            this.GetStatusOfSingleScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatusOfSingleScanOperationCompleted);
        }
        this.InvokeAsync("GetStatusOfSingleScan", new object[] {
                    sessionID,
                    runId}, this.GetStatusOfSingleScanOperationCompleted, userState);
    }
    
    private void OnGetStatusOfSingleScanOperationCompleted(object arg) {
        if ((this.GetStatusOfSingleScanCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetStatusOfSingleScanCompleted(this, new GetStatusOfSingleScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/CreateScanReport", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSCreateReportResponse CreateScanReport(string sessionID, CxWSReportRequest reportRequest) {
        object[] results = this.Invoke("CreateScanReport", new object[] {
                    sessionID,
                    reportRequest});
        return ((CxWSCreateReportResponse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateScanReport(string sessionID, CxWSReportRequest reportRequest, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateScanReport", new object[] {
                    sessionID,
                    reportRequest}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSCreateReportResponse EndCreateScanReport(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSCreateReportResponse)(results[0]));
    }
    
    /// <remarks/>
    public void CreateScanReportAsync(string sessionID, CxWSReportRequest reportRequest) {
        this.CreateScanReportAsync(sessionID, reportRequest, null);
    }
    
    /// <remarks/>
    public void CreateScanReportAsync(string sessionID, CxWSReportRequest reportRequest, object userState) {
        if ((this.CreateScanReportOperationCompleted == null)) {
            this.CreateScanReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateScanReportOperationCompleted);
        }
        this.InvokeAsync("CreateScanReport", new object[] {
                    sessionID,
                    reportRequest}, this.CreateScanReportOperationCompleted, userState);
    }
    
    private void OnCreateScanReportOperationCompleted(object arg) {
        if ((this.CreateScanReportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateScanReportCompleted(this, new CreateScanReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/GetScanReportStatus", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSReportStatusResponse GetScanReportStatus(string SessionID, long ReportID) {
        object[] results = this.Invoke("GetScanReportStatus", new object[] {
                    SessionID,
                    ReportID});
        return ((CxWSReportStatusResponse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScanReportStatus(string SessionID, long ReportID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScanReportStatus", new object[] {
                    SessionID,
                    ReportID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSReportStatusResponse EndGetScanReportStatus(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSReportStatusResponse)(results[0]));
    }
    
    /// <remarks/>
    public void GetScanReportStatusAsync(string SessionID, long ReportID) {
        this.GetScanReportStatusAsync(SessionID, ReportID, null);
    }
    
    /// <remarks/>
    public void GetScanReportStatusAsync(string SessionID, long ReportID, object userState) {
        if ((this.GetScanReportStatusOperationCompleted == null)) {
            this.GetScanReportStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanReportStatusOperationCompleted);
        }
        this.InvokeAsync("GetScanReportStatus", new object[] {
                    SessionID,
                    ReportID}, this.GetScanReportStatusOperationCompleted, userState);
    }
    
    private void OnGetScanReportStatusOperationCompleted(object arg) {
        if ((this.GetScanReportStatusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScanReportStatusCompleted(this, new GetScanReportStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/v7/GetScanReport", RequestNamespace="http://Checkmarx.com/v7", ResponseNamespace="http://Checkmarx.com/v7", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScanResults GetScanReport(string SessionID, long ReportID) {
        object[] results = this.Invoke("GetScanReport", new object[] {
                    SessionID,
                    ReportID});
        return ((CxWSResponseScanResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScanReport(string SessionID, long ReportID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScanReport", new object[] {
                    SessionID,
                    ReportID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScanResults EndGetScanReport(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScanResults)(results[0]));
    }
    
    /// <remarks/>
    public void GetScanReportAsync(string SessionID, long ReportID) {
        this.GetScanReportAsync(SessionID, ReportID, null);
    }
    
    /// <remarks/>
    public void GetScanReportAsync(string SessionID, long ReportID, object userState) {
        if ((this.GetScanReportOperationCompleted == null)) {
            this.GetScanReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanReportOperationCompleted);
        }
        this.InvokeAsync("GetScanReport", new object[] {
                    SessionID,
                    ReportID}, this.GetScanReportOperationCompleted, userState);
    }
    
    private void OnGetScanReportOperationCompleted(object arg) {
        if ((this.GetScanReportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScanReportCompleted(this, new GetScanReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class Credentials {
    
    private string userField;
    
    private string passField;
    
    /// <remarks/>
    public string User {
        get {
            return this.userField;
        }
        set {
            this.userField = value;
        }
    }
    
    /// <remarks/>
    public string Pass {
        get {
            return this.passField;
        }
        set {
            this.passField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSReportRequest {
    
    private CxWSReportType typeField;
    
    private long scanIDField;
    
    /// <remarks/>
    public CxWSReportType Type {
        get {
            return this.typeField;
        }
        set {
            this.typeField = value;
        }
    }
    
    /// <remarks/>
    public long ScanID {
        get {
            return this.scanIDField;
        }
        set {
            this.scanIDField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public enum CxWSReportType {
    
    /// <remarks/>
    PDF,
    
    /// <remarks/>
    RTF,
    
    /// <remarks/>
    CSV,
    
    /// <remarks/>
    XML,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class ResultStateData {
    
    private long scanIdField;
    
    private long pathIdField;
    
    private long projectIdField;
    
    private string remarksField;
    
    private int resultLabelTypeField;
    
    private string dataField;
    
    /// <remarks/>
    public long scanId {
        get {
            return this.scanIdField;
        }
        set {
            this.scanIdField = value;
        }
    }
    
    /// <remarks/>
    public long PathId {
        get {
            return this.pathIdField;
        }
        set {
            this.pathIdField = value;
        }
    }
    
    /// <remarks/>
    public long projectId {
        get {
            return this.projectIdField;
        }
        set {
            this.projectIdField = value;
        }
    }
    
    /// <remarks/>
    public string Remarks {
        get {
            return this.remarksField;
        }
        set {
            this.remarksField = value;
        }
    }
    
    /// <remarks/>
    public int ResultLabelType {
        get {
            return this.resultLabelTypeField;
        }
        set {
            this.resultLabelTypeField = value;
        }
    }
    
    /// <remarks/>
    public string data {
        get {
            return this.dataField;
        }
        set {
            this.dataField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class ConfigurationSet {
    
    private string configSetNameField;
    
    private long idField;
    
    /// <remarks/>
    public string ConfigSetName {
        get {
            return this.configSetNameField;
        }
        set {
            this.configSetNameField = value;
        }
    }
    
    /// <remarks/>
    public long ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSEnableCRUDAction {
    
    private CxWSCrudEnum typeField;
    
    private bool enableField;
    
    /// <remarks/>
    public CxWSCrudEnum Type {
        get {
            return this.typeField;
        }
        set {
            this.typeField = value;
        }
    }
    
    /// <remarks/>
    public bool Enable {
        get {
            return this.enableField;
        }
        set {
            this.enableField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public enum CxWSCrudEnum {
    
    /// <remarks/>
    Create,
    
    /// <remarks/>
    Delete,
    
    /// <remarks/>
    Update,
    
    /// <remarks/>
    View,
    
    /// <remarks/>
    Run,
    
    /// <remarks/>
    Investigate,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSItemAndCRUD {
    
    private CxWSItemTypeEnum typeField;
    
    private CxWSEnableCRUDAction[] cRUDActionListField;
    
    /// <remarks/>
    public CxWSItemTypeEnum Type {
        get {
            return this.typeField;
        }
        set {
            this.typeField = value;
        }
    }
    
    /// <remarks/>
    public CxWSEnableCRUDAction[] CRUDActionList {
        get {
            return this.cRUDActionListField;
        }
        set {
            this.cRUDActionListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public enum CxWSItemTypeEnum {
    
    /// <remarks/>
    Project,
    
    /// <remarks/>
    Task,
    
    /// <remarks/>
    Scan,
    
    /// <remarks/>
    Preset,
    
    /// <remarks/>
    Configuration,
    
    /// <remarks/>
    Users,
    
    /// <remarks/>
    Roles,
    
    /// <remarks/>
    Other,
    
    /// <remarks/>
    SystemSettings,
    
    /// <remarks/>
    Ignore_Path,
    
    /// <remarks/>
    ResultComment,
    
    /// <remarks/>
    ResultSeverity,
    
    /// <remarks/>
    ResultStatus,
    
    /// <remarks/>
    AuditUser,
}

/// <remarks/>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSRoleWithUserPrivileges))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class Role {
    
    private string nameField;
    
    private string idField;
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public string ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSRoleWithUserPrivileges : Role {
    
    private CxWSItemAndCRUD[] itemsCRUDField;
    
    /// <remarks/>
    public CxWSItemAndCRUD[] ItemsCRUD {
        get {
            return this.itemsCRUDField;
        }
        set {
            this.itemsCRUDField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class Group {
    
    private string groupNameField;
    
    private string idField;
    
    private GroupType typeField;
    
    private string guidField;
    
    /// <remarks/>
    public string GroupName {
        get {
            return this.groupNameField;
        }
        set {
            this.groupNameField = value;
        }
    }
    
    /// <remarks/>
    public string ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public GroupType Type {
        get {
            return this.typeField;
        }
        set {
            this.typeField = value;
        }
    }
    
    /// <remarks/>
    public string Guid {
        get {
            return this.guidField;
        }
        set {
            this.guidField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public enum GroupType {
    
    /// <remarks/>
    Team,
    
    /// <remarks/>
    Company,
    
    /// <remarks/>
    SP,
    
    /// <remarks/>
    Server,
}

/// <remarks/>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(UserData))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class WebClientUser {
    
    private long idField;
    
    private string firstNameField;
    
    private string lastNameField;
    
    private int userPreferedLanguageLCIDField;
    
    private string passwordField;
    
    private string jobTitleField;
    
    private string emailField;
    
    private string userNameField;
    
    private string uPNField;
    
    private string phoneField;
    
    private string cellPhoneField;
    
    private string skypeField;
    
    private string companyIDField;
    
    private string companyNameField;
    
    private string willExpireAfterDaysField;
    
    private string countryField;
    
    private System.DateTime dateCreatedField;
    
    private bool auditUserField;
    
    private Group[] groupListField;
    
    /// <remarks/>
    public long ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public string FirstName {
        get {
            return this.firstNameField;
        }
        set {
            this.firstNameField = value;
        }
    }
    
    /// <remarks/>
    public string LastName {
        get {
            return this.lastNameField;
        }
        set {
            this.lastNameField = value;
        }
    }
    
    /// <remarks/>
    public int UserPreferedLanguageLCID {
        get {
            return this.userPreferedLanguageLCIDField;
        }
        set {
            this.userPreferedLanguageLCIDField = value;
        }
    }
    
    /// <remarks/>
    public string Password {
        get {
            return this.passwordField;
        }
        set {
            this.passwordField = value;
        }
    }
    
    /// <remarks/>
    public string JobTitle {
        get {
            return this.jobTitleField;
        }
        set {
            this.jobTitleField = value;
        }
    }
    
    /// <remarks/>
    public string Email {
        get {
            return this.emailField;
        }
        set {
            this.emailField = value;
        }
    }
    
    /// <remarks/>
    public string UserName {
        get {
            return this.userNameField;
        }
        set {
            this.userNameField = value;
        }
    }
    
    /// <remarks/>
    public string UPN {
        get {
            return this.uPNField;
        }
        set {
            this.uPNField = value;
        }
    }
    
    /// <remarks/>
    public string Phone {
        get {
            return this.phoneField;
        }
        set {
            this.phoneField = value;
        }
    }
    
    /// <remarks/>
    public string CellPhone {
        get {
            return this.cellPhoneField;
        }
        set {
            this.cellPhoneField = value;
        }
    }
    
    /// <remarks/>
    public string Skype {
        get {
            return this.skypeField;
        }
        set {
            this.skypeField = value;
        }
    }
    
    /// <remarks/>
    public string CompanyID {
        get {
            return this.companyIDField;
        }
        set {
            this.companyIDField = value;
        }
    }
    
    /// <remarks/>
    public string CompanyName {
        get {
            return this.companyNameField;
        }
        set {
            this.companyNameField = value;
        }
    }
    
    /// <remarks/>
    public string willExpireAfterDays {
        get {
            return this.willExpireAfterDaysField;
        }
        set {
            this.willExpireAfterDaysField = value;
        }
    }
    
    /// <remarks/>
    public string country {
        get {
            return this.countryField;
        }
        set {
            this.countryField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime DateCreated {
        get {
            return this.dateCreatedField;
        }
        set {
            this.dateCreatedField = value;
        }
    }
    
    /// <remarks/>
    public bool AuditUser {
        get {
            return this.auditUserField;
        }
        set {
            this.auditUserField = value;
        }
    }
    
    /// <remarks/>
    public Group[] GroupList {
        get {
            return this.groupListField;
        }
        set {
            this.groupListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class UserData : WebClientUser {
    
    private bool isActiveField;
    
    private Role roleDataField;
    
    /// <remarks/>
    public bool IsActive {
        get {
            return this.isActiveField;
        }
        set {
            this.isActiveField = value;
        }
    }
    
    /// <remarks/>
    public Role RoleData {
        get {
            return this.roleDataField;
        }
        set {
            this.roleDataField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class ResultState {
    
    private string resultNameField;
    
    private long resultIDField;
    
    /// <remarks/>
    public string ResultName {
        get {
            return this.resultNameField;
        }
        set {
            this.resultNameField = value;
        }
    }
    
    /// <remarks/>
    public long ResultID {
        get {
            return this.resultIDField;
        }
        set {
            this.resultIDField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSQueryVulnerabilityData {
    
    private long queryIdField;
    
    private string queryNameField;
    
    private long groupIdField;
    
    private string groupNameField;
    
    private int severityField;
    
    private long cWEField;
    
    private int amountOfResultsField;
    
    private string languageNameField;
    
    /// <remarks/>
    public long QueryId {
        get {
            return this.queryIdField;
        }
        set {
            this.queryIdField = value;
        }
    }
    
    /// <remarks/>
    public string QueryName {
        get {
            return this.queryNameField;
        }
        set {
            this.queryNameField = value;
        }
    }
    
    /// <remarks/>
    public long GroupId {
        get {
            return this.groupIdField;
        }
        set {
            this.groupIdField = value;
        }
    }
    
    /// <remarks/>
    public string GroupName {
        get {
            return this.groupNameField;
        }
        set {
            this.groupNameField = value;
        }
    }
    
    /// <remarks/>
    public int Severity {
        get {
            return this.severityField;
        }
        set {
            this.severityField = value;
        }
    }
    
    /// <remarks/>
    public long CWE {
        get {
            return this.cWEField;
        }
        set {
            this.cWEField = value;
        }
    }
    
    /// <remarks/>
    public int AmountOfResults {
        get {
            return this.amountOfResultsField;
        }
        set {
            this.amountOfResultsField = value;
        }
    }
    
    /// <remarks/>
    public string LanguageName {
        get {
            return this.languageNameField;
        }
        set {
            this.languageNameField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class ScanDisplayData {
    
    private long scanIDField;
    
    private bool isAllowedToDeleteField;
    
    private CxDateTime queuedDateTimeField;
    
    private int riskLevelScoreField;
    
    private CxDateTime finishedDateTimeField;
    
    private long projectIdField;
    
    private string projectNameField;
    
    private string projectOwnerField;
    
    private string teamNameField;
    
    private bool isIncrementalField;
    
    private long lOCField;
    
    private int highSeverityResultsField;
    
    private int mediumSeverityResultsField;
    
    private int lowSeverityResultsField;
    
    private string commentsField;
    
    private ScanType scanDisplayTypeField;
    
    /// <remarks/>
    public long ScanID {
        get {
            return this.scanIDField;
        }
        set {
            this.scanIDField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToDelete {
        get {
            return this.isAllowedToDeleteField;
        }
        set {
            this.isAllowedToDeleteField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime QueuedDateTime {
        get {
            return this.queuedDateTimeField;
        }
        set {
            this.queuedDateTimeField = value;
        }
    }
    
    /// <remarks/>
    public int RiskLevelScore {
        get {
            return this.riskLevelScoreField;
        }
        set {
            this.riskLevelScoreField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime FinishedDateTime {
        get {
            return this.finishedDateTimeField;
        }
        set {
            this.finishedDateTimeField = value;
        }
    }
    
    /// <remarks/>
    public long ProjectId {
        get {
            return this.projectIdField;
        }
        set {
            this.projectIdField = value;
        }
    }
    
    /// <remarks/>
    public string ProjectName {
        get {
            return this.projectNameField;
        }
        set {
            this.projectNameField = value;
        }
    }
    
    /// <remarks/>
    public string ProjectOwner {
        get {
            return this.projectOwnerField;
        }
        set {
            this.projectOwnerField = value;
        }
    }
    
    /// <remarks/>
    public string TeamName {
        get {
            return this.teamNameField;
        }
        set {
            this.teamNameField = value;
        }
    }
    
    /// <remarks/>
    public bool IsIncremental {
        get {
            return this.isIncrementalField;
        }
        set {
            this.isIncrementalField = value;
        }
    }
    
    /// <remarks/>
    public long LOC {
        get {
            return this.lOCField;
        }
        set {
            this.lOCField = value;
        }
    }
    
    /// <remarks/>
    public int HighSeverityResults {
        get {
            return this.highSeverityResultsField;
        }
        set {
            this.highSeverityResultsField = value;
        }
    }
    
    /// <remarks/>
    public int MediumSeverityResults {
        get {
            return this.mediumSeverityResultsField;
        }
        set {
            this.mediumSeverityResultsField = value;
        }
    }
    
    /// <remarks/>
    public int LowSeverityResults {
        get {
            return this.lowSeverityResultsField;
        }
        set {
            this.lowSeverityResultsField = value;
        }
    }
    
    /// <remarks/>
    public string Comments {
        get {
            return this.commentsField;
        }
        set {
            this.commentsField = value;
        }
    }
    
    /// <remarks/>
    public ScanType ScanDisplayType {
        get {
            return this.scanDisplayTypeField;
        }
        set {
            this.scanDisplayTypeField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxDateTime {
    
    private int hourField;
    
    private int minuteField;
    
    private int secondField;
    
    private int dayField;
    
    private int monthField;
    
    private int yearField;
    
    /// <remarks/>
    public int Hour {
        get {
            return this.hourField;
        }
        set {
            this.hourField = value;
        }
    }
    
    /// <remarks/>
    public int Minute {
        get {
            return this.minuteField;
        }
        set {
            this.minuteField = value;
        }
    }
    
    /// <remarks/>
    public int Second {
        get {
            return this.secondField;
        }
        set {
            this.secondField = value;
        }
    }
    
    /// <remarks/>
    public int Day {
        get {
            return this.dayField;
        }
        set {
            this.dayField = value;
        }
    }
    
    /// <remarks/>
    public int Month {
        get {
            return this.monthField;
        }
        set {
            this.monthField = value;
        }
    }
    
    /// <remarks/>
    public int Year {
        get {
            return this.yearField;
        }
        set {
            this.yearField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public enum ScanType {
    
    /// <remarks/>
    UNKNOWN,
    
    /// <remarks/>
    ALLSCANS,
    
    /// <remarks/>
    REGULAR,
    
    /// <remarks/>
    SUBSET,
    
    /// <remarks/>
    PARTIAL,
    
    /// <remarks/>
    RUNNING,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class ProjectDisplayData {
    
    private UserPermission permissionField;
    
    private long projectIDField;
    
    private string serviceProviderField;
    
    private string companyField;
    
    private string ownerField;
    
    private string projectNameField;
    
    private string groupField;
    
    private string presetField;
    
    private CxDateTime lastScanDateField;
    
    private int totalScansField;
    
    /// <remarks/>
    public UserPermission Permission {
        get {
            return this.permissionField;
        }
        set {
            this.permissionField = value;
        }
    }
    
    /// <remarks/>
    public long projectID {
        get {
            return this.projectIDField;
        }
        set {
            this.projectIDField = value;
        }
    }
    
    /// <remarks/>
    public string ServiceProvider {
        get {
            return this.serviceProviderField;
        }
        set {
            this.serviceProviderField = value;
        }
    }
    
    /// <remarks/>
    public string Company {
        get {
            return this.companyField;
        }
        set {
            this.companyField = value;
        }
    }
    
    /// <remarks/>
    public string Owner {
        get {
            return this.ownerField;
        }
        set {
            this.ownerField = value;
        }
    }
    
    /// <remarks/>
    public string ProjectName {
        get {
            return this.projectNameField;
        }
        set {
            this.projectNameField = value;
        }
    }
    
    /// <remarks/>
    public string Group {
        get {
            return this.groupField;
        }
        set {
            this.groupField = value;
        }
    }
    
    /// <remarks/>
    public string Preset {
        get {
            return this.presetField;
        }
        set {
            this.presetField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime LastScanDate {
        get {
            return this.lastScanDateField;
        }
        set {
            this.lastScanDateField = value;
        }
    }
    
    /// <remarks/>
    public int TotalScans {
        get {
            return this.totalScansField;
        }
        set {
            this.totalScansField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class UserPermission {
    
    private bool isAllowedToDeleteField;
    
    private bool isAllowedToDuplicateField;
    
    private bool isAllowedToRunField;
    
    private bool isAllowedToUpdateField;
    
    /// <remarks/>
    public bool IsAllowedToDelete {
        get {
            return this.isAllowedToDeleteField;
        }
        set {
            this.isAllowedToDeleteField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToDuplicate {
        get {
            return this.isAllowedToDuplicateField;
        }
        set {
            this.isAllowedToDuplicateField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToRun {
        get {
            return this.isAllowedToRunField;
        }
        set {
            this.isAllowedToRunField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToUpdate {
        get {
            return this.isAllowedToUpdateField;
        }
        set {
            this.isAllowedToUpdateField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSPathNode {
    
    private int columnField;
    
    private string fullNameField;
    
    private string fileNameField;
    
    private int lengthField;
    
    private int lineField;
    
    private string nameField;
    
    private int dOM_IdField;
    
    private int methodLineField;
    
    private int pathNodeIdField;
    
    /// <remarks/>
    public int Column {
        get {
            return this.columnField;
        }
        set {
            this.columnField = value;
        }
    }
    
    /// <remarks/>
    public string FullName {
        get {
            return this.fullNameField;
        }
        set {
            this.fullNameField = value;
        }
    }
    
    /// <remarks/>
    public string FileName {
        get {
            return this.fileNameField;
        }
        set {
            this.fileNameField = value;
        }
    }
    
    /// <remarks/>
    public int Length {
        get {
            return this.lengthField;
        }
        set {
            this.lengthField = value;
        }
    }
    
    /// <remarks/>
    public int Line {
        get {
            return this.lineField;
        }
        set {
            this.lineField = value;
        }
    }
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public int DOM_Id {
        get {
            return this.dOM_IdField;
        }
        set {
            this.dOM_IdField = value;
        }
    }
    
    /// <remarks/>
    public int MethodLine {
        get {
            return this.methodLineField;
        }
        set {
            this.methodLineField = value;
        }
    }
    
    /// <remarks/>
    public int PathNodeId {
        get {
            return this.pathNodeIdField;
        }
        set {
            this.pathNodeIdField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResultPath {
    
    private long similarityIdField;
    
    private long pathIdField;
    
    private string commentField;
    
    private int stateField;
    
    private int severityField;
    
    private string assignedUserField;
    
    private CxWSPathNode[] nodesField;
    
    /// <remarks/>
    public long SimilarityId {
        get {
            return this.similarityIdField;
        }
        set {
            this.similarityIdField = value;
        }
    }
    
    /// <remarks/>
    public long PathId {
        get {
            return this.pathIdField;
        }
        set {
            this.pathIdField = value;
        }
    }
    
    /// <remarks/>
    public string Comment {
        get {
            return this.commentField;
        }
        set {
            this.commentField = value;
        }
    }
    
    /// <remarks/>
    public int State {
        get {
            return this.stateField;
        }
        set {
            this.stateField = value;
        }
    }
    
    /// <remarks/>
    public int Severity {
        get {
            return this.severityField;
        }
        set {
            this.severityField = value;
        }
    }
    
    /// <remarks/>
    public string AssignedUser {
        get {
            return this.assignedUserField;
        }
        set {
            this.assignedUserField = value;
        }
    }
    
    /// <remarks/>
    public CxWSPathNode[] Nodes {
        get {
            return this.nodesField;
        }
        set {
            this.nodesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSSingleResultData {
    
    private long queryIdField;
    
    private long pathIdField;
    
    private string sourceFolderField;
    
    private string sourceFileField;
    
    private long sourceLineField;
    
    private string sourceObjectField;
    
    private string destFolderField;
    
    private string destFileField;
    
    private long destLineField;
    
    private string destObjectField;
    
    private string commentField;
    
    private int stateField;
    
    private int severityField;
    
    private string assignedUserField;
    
    private CompareStatusType resultStatusField;
    
    /// <remarks/>
    public long QueryId {
        get {
            return this.queryIdField;
        }
        set {
            this.queryIdField = value;
        }
    }
    
    /// <remarks/>
    public long PathId {
        get {
            return this.pathIdField;
        }
        set {
            this.pathIdField = value;
        }
    }
    
    /// <remarks/>
    public string SourceFolder {
        get {
            return this.sourceFolderField;
        }
        set {
            this.sourceFolderField = value;
        }
    }
    
    /// <remarks/>
    public string SourceFile {
        get {
            return this.sourceFileField;
        }
        set {
            this.sourceFileField = value;
        }
    }
    
    /// <remarks/>
    public long SourceLine {
        get {
            return this.sourceLineField;
        }
        set {
            this.sourceLineField = value;
        }
    }
    
    /// <remarks/>
    public string SourceObject {
        get {
            return this.sourceObjectField;
        }
        set {
            this.sourceObjectField = value;
        }
    }
    
    /// <remarks/>
    public string DestFolder {
        get {
            return this.destFolderField;
        }
        set {
            this.destFolderField = value;
        }
    }
    
    /// <remarks/>
    public string DestFile {
        get {
            return this.destFileField;
        }
        set {
            this.destFileField = value;
        }
    }
    
    /// <remarks/>
    public long DestLine {
        get {
            return this.destLineField;
        }
        set {
            this.destLineField = value;
        }
    }
    
    /// <remarks/>
    public string DestObject {
        get {
            return this.destObjectField;
        }
        set {
            this.destObjectField = value;
        }
    }
    
    /// <remarks/>
    public string Comment {
        get {
            return this.commentField;
        }
        set {
            this.commentField = value;
        }
    }
    
    /// <remarks/>
    public int State {
        get {
            return this.stateField;
        }
        set {
            this.stateField = value;
        }
    }
    
    /// <remarks/>
    public int Severity {
        get {
            return this.severityField;
        }
        set {
            this.severityField = value;
        }
    }
    
    /// <remarks/>
    public string AssignedUser {
        get {
            return this.assignedUserField;
        }
        set {
            this.assignedUserField = value;
        }
    }
    
    /// <remarks/>
    public CompareStatusType ResultStatus {
        get {
            return this.resultStatusField;
        }
        set {
            this.resultStatusField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="CxDataTypes.xsd")]
public enum CompareStatusType {
    
    /// <remarks/>
    Fixed,
    
    /// <remarks/>
    Reoccured,
    
    /// <remarks/>
    New,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class ScanAction {
    
    private string[] parametersField;
    
    private ScanEventType triggerField;
    
    private ScanActionType actionField;
    
    /// <remarks/>
    public string[] Parameters {
        get {
            return this.parametersField;
        }
        set {
            this.parametersField = value;
        }
    }
    
    /// <remarks/>
    public ScanEventType Trigger {
        get {
            return this.triggerField;
        }
        set {
            this.triggerField = value;
        }
    }
    
    /// <remarks/>
    public ScanActionType Action {
        get {
            return this.actionField;
        }
        set {
            this.actionField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public enum ScanEventType {
    
    /// <remarks/>
    BeforeScanStarts,
    
    /// <remarks/>
    AfterScanSucceeds,
    
    /// <remarks/>
    OnScanFailure,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public enum ScanActionType {
    
    /// <remarks/>
    EmailNotification,
    
    /// <remarks/>
    PostScanAction,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class ScanActionSettings {
    
    private ScanAction[] scanActionListField;
    
    /// <remarks/>
    public ScanAction[] ScanActionList {
        get {
            return this.scanActionListField;
        }
        set {
            this.scanActionListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class ScheduleSettings {
    
    private ScheduleType scheduleField;
    
    private DayOfWeek[] scheduledDaysField;
    
    private CxDateTime timeField;
    
    /// <remarks/>
    public ScheduleType Schedule {
        get {
            return this.scheduleField;
        }
        set {
            this.scheduleField = value;
        }
    }
    
    /// <remarks/>
    public DayOfWeek[] ScheduledDays {
        get {
            return this.scheduledDaysField;
        }
        set {
            this.scheduledDaysField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime Time {
        get {
            return this.timeField;
        }
        set {
            this.timeField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public enum ScheduleType {
    
    /// <remarks/>
    None,
    
    /// <remarks/>
    Now,
    
    /// <remarks/>
    Weekly,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public enum DayOfWeek {
    
    /// <remarks/>
    Sunday,
    
    /// <remarks/>
    Monday,
    
    /// <remarks/>
    Tuesday,
    
    /// <remarks/>
    Wednesday,
    
    /// <remarks/>
    Thursday,
    
    /// <remarks/>
    Friday,
    
    /// <remarks/>
    Saturday,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class LocalCodeContainer {
    
    private byte[] zippedFileField;
    
    private string fileNameField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
    public byte[] ZippedFile {
        get {
            return this.zippedFileField;
        }
        set {
            this.zippedFileField = value;
        }
    }
    
    /// <remarks/>
    public string FileName {
        get {
            return this.fileNameField;
        }
        set {
            this.fileNameField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class SourceControlSettings {
    
    private int portField;
    
    private bool useSSLField;
    
    private bool useSSHField;
    
    private string serverNameField;
    
    private RepositoryType repositoryField;
    
    private Credentials userCredentialsField;
    
    private SourceControlProtocolType protocolField;
    
    private string repositoryNameField;
    
    private string protocolParametersField;
    
    private string gITBranchField;
    
    private GitLsRemoteViewType gitLsViewTypeField;
    
    private string sSHPublicKeyField;
    
    private string sSHPrivateKeyField;
    
    /// <remarks/>
    public int Port {
        get {
            return this.portField;
        }
        set {
            this.portField = value;
        }
    }
    
    /// <remarks/>
    public bool UseSSL {
        get {
            return this.useSSLField;
        }
        set {
            this.useSSLField = value;
        }
    }
    
    /// <remarks/>
    public bool UseSSH {
        get {
            return this.useSSHField;
        }
        set {
            this.useSSHField = value;
        }
    }
    
    /// <remarks/>
    public string ServerName {
        get {
            return this.serverNameField;
        }
        set {
            this.serverNameField = value;
        }
    }
    
    /// <remarks/>
    public RepositoryType Repository {
        get {
            return this.repositoryField;
        }
        set {
            this.repositoryField = value;
        }
    }
    
    /// <remarks/>
    public Credentials UserCredentials {
        get {
            return this.userCredentialsField;
        }
        set {
            this.userCredentialsField = value;
        }
    }
    
    /// <remarks/>
    public SourceControlProtocolType Protocol {
        get {
            return this.protocolField;
        }
        set {
            this.protocolField = value;
        }
    }
    
    /// <remarks/>
    public string RepositoryName {
        get {
            return this.repositoryNameField;
        }
        set {
            this.repositoryNameField = value;
        }
    }
    
    /// <remarks/>
    public string ProtocolParameters {
        get {
            return this.protocolParametersField;
        }
        set {
            this.protocolParametersField = value;
        }
    }
    
    /// <remarks/>
    public string GITBranch {
        get {
            return this.gITBranchField;
        }
        set {
            this.gITBranchField = value;
        }
    }
    
    /// <remarks/>
    public GitLsRemoteViewType GitLsViewType {
        get {
            return this.gitLsViewTypeField;
        }
        set {
            this.gitLsViewTypeField = value;
        }
    }
    
    /// <remarks/>
    public string SSHPublicKey {
        get {
            return this.sSHPublicKeyField;
        }
        set {
            this.sSHPublicKeyField = value;
        }
    }
    
    /// <remarks/>
    public string SSHPrivateKey {
        get {
            return this.sSHPrivateKeyField;
        }
        set {
            this.sSHPrivateKeyField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public enum RepositoryType {
    
    /// <remarks/>
    TFS,
    
    /// <remarks/>
    SVN,
    
    /// <remarks/>
    CVS,
    
    /// <remarks/>
    GIT,
    
    /// <remarks/>
    Perforce,
    
    /// <remarks/>
    NONE,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public enum SourceControlProtocolType {
    
    /// <remarks/>
    WindowsAuthentication,
    
    /// <remarks/>
    SSL,
    
    /// <remarks/>
    SSH,
    
    /// <remarks/>
    PasswordServer,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public enum GitLsRemoteViewType {
    
    /// <remarks/>
    TAGS,
    
    /// <remarks/>
    HEADS,
    
    /// <remarks/>
    TAGS_AND_HEADS,
    
    /// <remarks/>
    ALL,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class ScanPath {
    
    private string pathField;
    
    private bool includeSubTreeField;
    
    /// <remarks/>
    public string Path {
        get {
            return this.pathField;
        }
        set {
            this.pathField = value;
        }
    }
    
    /// <remarks/>
    public bool IncludeSubTree {
        get {
            return this.includeSubTreeField;
        }
        set {
            this.includeSubTreeField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class SourceCodeSettings {
    
    private SourceLocationType sourceOriginField;
    
    private Credentials userCredentialsField;
    
    private ScanPath[] pathListField;
    
    private SourceControlSettings sourceControlSettingField;
    
    private LocalCodeContainer packagedCodeField;
    
    private string sourcePullingActionField;
    
    /// <remarks/>
    public SourceLocationType SourceOrigin {
        get {
            return this.sourceOriginField;
        }
        set {
            this.sourceOriginField = value;
        }
    }
    
    /// <remarks/>
    public Credentials UserCredentials {
        get {
            return this.userCredentialsField;
        }
        set {
            this.userCredentialsField = value;
        }
    }
    
    /// <remarks/>
    public ScanPath[] PathList {
        get {
            return this.pathListField;
        }
        set {
            this.pathListField = value;
        }
    }
    
    /// <remarks/>
    public SourceControlSettings SourceControlSetting {
        get {
            return this.sourceControlSettingField;
        }
        set {
            this.sourceControlSettingField = value;
        }
    }
    
    /// <remarks/>
    public LocalCodeContainer PackagedCode {
        get {
            return this.packagedCodeField;
        }
        set {
            this.packagedCodeField = value;
        }
    }
    
    /// <remarks/>
    public string SourcePullingAction {
        get {
            return this.sourcePullingActionField;
        }
        set {
            this.sourcePullingActionField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public enum SourceLocationType {
    
    /// <remarks/>
    Local,
    
    /// <remarks/>
    Shared,
    
    /// <remarks/>
    SourceControl,
    
    /// <remarks/>
    SourcePulling,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class ProjectSettings {
    
    private long projectIDField;
    
    private string projectNameField;
    
    private long presetIDField;
    
    private string associatedGroupIDField;
    
    private long scanConfigurationIDField;
    
    private string descriptionField;
    
    /// <remarks/>
    public long projectID {
        get {
            return this.projectIDField;
        }
        set {
            this.projectIDField = value;
        }
    }
    
    /// <remarks/>
    public string ProjectName {
        get {
            return this.projectNameField;
        }
        set {
            this.projectNameField = value;
        }
    }
    
    /// <remarks/>
    public long PresetID {
        get {
            return this.presetIDField;
        }
        set {
            this.presetIDField = value;
        }
    }
    
    /// <remarks/>
    public string AssociatedGroupID {
        get {
            return this.associatedGroupIDField;
        }
        set {
            this.associatedGroupIDField = value;
        }
    }
    
    /// <remarks/>
    public long ScanConfigurationID {
        get {
            return this.scanConfigurationIDField;
        }
        set {
            this.scanConfigurationIDField = value;
        }
    }
    
    /// <remarks/>
    public string Description {
        get {
            return this.descriptionField;
        }
        set {
            this.descriptionField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class ProjectConfiguration {
    
    private ProjectSettings projectSettingsField;
    
    private SourceCodeSettings sourceCodeSettingsField;
    
    private ScheduleSettings scheduleSettingsField;
    
    private ScanActionSettings scanActionSettingsField;
    
    /// <remarks/>
    public ProjectSettings ProjectSettings {
        get {
            return this.projectSettingsField;
        }
        set {
            this.projectSettingsField = value;
        }
    }
    
    /// <remarks/>
    public SourceCodeSettings SourceCodeSettings {
        get {
            return this.sourceCodeSettingsField;
        }
        set {
            this.sourceCodeSettingsField = value;
        }
    }
    
    /// <remarks/>
    public ScheduleSettings ScheduleSettings {
        get {
            return this.scheduleSettingsField;
        }
        set {
            this.scheduleSettingsField = value;
        }
    }
    
    /// <remarks/>
    public ScanActionSettings ScanActionSettings {
        get {
            return this.scanActionSettingsField;
        }
        set {
            this.scanActionSettingsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class Preset {
    
    private string presetNameField;
    
    private long idField;
    
    private string owningUserField;
    
    private bool isUserAllowToUpdateField;
    
    private bool isUserAllowToDeleteField;
    
    /// <remarks/>
    public string PresetName {
        get {
            return this.presetNameField;
        }
        set {
            this.presetNameField = value;
        }
    }
    
    /// <remarks/>
    public long ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public string owningUser {
        get {
            return this.owningUserField;
        }
        set {
            this.owningUserField = value;
        }
    }
    
    /// <remarks/>
    public bool isUserAllowToUpdate {
        get {
            return this.isUserAllowToUpdateField;
        }
        set {
            this.isUserAllowToUpdateField = value;
        }
    }
    
    /// <remarks/>
    public bool isUserAllowToDelete {
        get {
            return this.isUserAllowToDeleteField;
        }
        set {
            this.isUserAllowToDeleteField = value;
        }
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScanResults))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSReportStatusResponse))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSCreateReportResponse))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseConfigSetList))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseGroupList))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScanStatus))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScanStatusArray))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseUserData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseResultStateList))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponceQuerisForScan))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScansDisplayData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseProjectsDisplayData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponceResultPath))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponceScanResults))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseRunID))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseProjectConfig))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponsePresetList))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseQueryDescription))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSessionID))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseLoginData))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSBasicRepsonse {
    
    private bool isSuccesfullField;
    
    private string errorMessageField;
    
    /// <remarks/>
    public bool IsSuccesfull {
        get {
            return this.isSuccesfullField;
        }
        set {
            this.isSuccesfullField = value;
        }
    }
    
    /// <remarks/>
    public string ErrorMessage {
        get {
            return this.errorMessageField;
        }
        set {
            this.errorMessageField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResponseScanResults : CxWSBasicRepsonse {
    
    private byte[] scanResultsField;
    
    private bool containsAllResultsField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
    public byte[] ScanResults {
        get {
            return this.scanResultsField;
        }
        set {
            this.scanResultsField = value;
        }
    }
    
    /// <remarks/>
    public bool containsAllResults {
        get {
            return this.containsAllResultsField;
        }
        set {
            this.containsAllResultsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSReportStatusResponse : CxWSBasicRepsonse {
    
    private bool isReadyField;
    
    private bool isFailedField;
    
    /// <remarks/>
    public bool IsReady {
        get {
            return this.isReadyField;
        }
        set {
            this.isReadyField = value;
        }
    }
    
    /// <remarks/>
    public bool IsFailed {
        get {
            return this.isFailedField;
        }
        set {
            this.isFailedField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSCreateReportResponse : CxWSBasicRepsonse {
    
    private long idField;
    
    /// <remarks/>
    public long ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResponseConfigSetList : CxWSBasicRepsonse {
    
    private ConfigurationSet[] configSetListField;
    
    /// <remarks/>
    public ConfigurationSet[] ConfigSetList {
        get {
            return this.configSetListField;
        }
        set {
            this.configSetListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResponseGroupList : CxWSBasicRepsonse {
    
    private Group[] groupListField;
    
    /// <remarks/>
    public Group[] GroupList {
        get {
            return this.groupListField;
        }
        set {
            this.groupListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResponseScanStatus : CxWSBasicRepsonse {
    
    private int currentStageField;
    
    private int queuePositionField;
    
    private int totalPercentField;
    
    private int currentStagePercentField;
    
    private string ownerField;
    
    private string stageNameField;
    
    private string stageMessageField;
    
    private string stepMessageField;
    
    private string stepDetailsField;
    
    private long resultIdField;
    
    private long scanIdField;
    
    private long projectIdField;
    
    private long taskIdField;
    
    private string taskNameField;
    
    private string projectNameField;
    
    private string runIdField;
    
    private string sourceIdField;
    
    private long lOCField;
    
    private CxDateTime timeScheduledField;
    
    private CxDateTime elapsedTimeField;
    
    private CxDateTime timeFinishedField;
    
    private CxDateTime timeBeginWorkingField;
    
    private CurrentStatusEnum currentStatusField;
    
    private bool partialResultsField;
    
    /// <remarks/>
    public int CurrentStage {
        get {
            return this.currentStageField;
        }
        set {
            this.currentStageField = value;
        }
    }
    
    /// <remarks/>
    public int QueuePosition {
        get {
            return this.queuePositionField;
        }
        set {
            this.queuePositionField = value;
        }
    }
    
    /// <remarks/>
    public int TotalPercent {
        get {
            return this.totalPercentField;
        }
        set {
            this.totalPercentField = value;
        }
    }
    
    /// <remarks/>
    public int CurrentStagePercent {
        get {
            return this.currentStagePercentField;
        }
        set {
            this.currentStagePercentField = value;
        }
    }
    
    /// <remarks/>
    public string Owner {
        get {
            return this.ownerField;
        }
        set {
            this.ownerField = value;
        }
    }
    
    /// <remarks/>
    public string StageName {
        get {
            return this.stageNameField;
        }
        set {
            this.stageNameField = value;
        }
    }
    
    /// <remarks/>
    public string StageMessage {
        get {
            return this.stageMessageField;
        }
        set {
            this.stageMessageField = value;
        }
    }
    
    /// <remarks/>
    public string StepMessage {
        get {
            return this.stepMessageField;
        }
        set {
            this.stepMessageField = value;
        }
    }
    
    /// <remarks/>
    public string StepDetails {
        get {
            return this.stepDetailsField;
        }
        set {
            this.stepDetailsField = value;
        }
    }
    
    /// <remarks/>
    public long ResultId {
        get {
            return this.resultIdField;
        }
        set {
            this.resultIdField = value;
        }
    }
    
    /// <remarks/>
    public long ScanId {
        get {
            return this.scanIdField;
        }
        set {
            this.scanIdField = value;
        }
    }
    
    /// <remarks/>
    public long ProjectId {
        get {
            return this.projectIdField;
        }
        set {
            this.projectIdField = value;
        }
    }
    
    /// <remarks/>
    public long TaskId {
        get {
            return this.taskIdField;
        }
        set {
            this.taskIdField = value;
        }
    }
    
    /// <remarks/>
    public string TaskName {
        get {
            return this.taskNameField;
        }
        set {
            this.taskNameField = value;
        }
    }
    
    /// <remarks/>
    public string ProjectName {
        get {
            return this.projectNameField;
        }
        set {
            this.projectNameField = value;
        }
    }
    
    /// <remarks/>
    public string RunId {
        get {
            return this.runIdField;
        }
        set {
            this.runIdField = value;
        }
    }
    
    /// <remarks/>
    public string SourceId {
        get {
            return this.sourceIdField;
        }
        set {
            this.sourceIdField = value;
        }
    }
    
    /// <remarks/>
    public long LOC {
        get {
            return this.lOCField;
        }
        set {
            this.lOCField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime TimeScheduled {
        get {
            return this.timeScheduledField;
        }
        set {
            this.timeScheduledField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime ElapsedTime {
        get {
            return this.elapsedTimeField;
        }
        set {
            this.elapsedTimeField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime TimeFinished {
        get {
            return this.timeFinishedField;
        }
        set {
            this.timeFinishedField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime TimeBeginWorking {
        get {
            return this.timeBeginWorkingField;
        }
        set {
            this.timeBeginWorkingField = value;
        }
    }
    
    /// <remarks/>
    public CurrentStatusEnum CurrentStatus {
        get {
            return this.currentStatusField;
        }
        set {
            this.currentStatusField = value;
        }
    }
    
    /// <remarks/>
    public bool PartialResults {
        get {
            return this.partialResultsField;
        }
        set {
            this.partialResultsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public enum CurrentStatusEnum {
    
    /// <remarks/>
    Queued,
    
    /// <remarks/>
    Working,
    
    /// <remarks/>
    Finished,
    
    /// <remarks/>
    Failed,
    
    /// <remarks/>
    Canceled,
    
    /// <remarks/>
    Deleted,
    
    /// <remarks/>
    Unknown,
    
    /// <remarks/>
    Unzipping,
    
    /// <remarks/>
    WaitingToProcess,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResponseScanStatusArray : CxWSBasicRepsonse {
    
    private CxWSResponseScanStatus[] statusArrField;
    
    /// <remarks/>
    public CxWSResponseScanStatus[] statusArr {
        get {
            return this.statusArrField;
        }
        set {
            this.statusArrField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResponseUserData : CxWSBasicRepsonse {
    
    private UserData[] userDataListField;
    
    /// <remarks/>
    public UserData[] UserDataList {
        get {
            return this.userDataListField;
        }
        set {
            this.userDataListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResponseResultStateList : CxWSBasicRepsonse {
    
    private ResultState[] resultStateListField;
    
    /// <remarks/>
    public ResultState[] ResultStateList {
        get {
            return this.resultStateListField;
        }
        set {
            this.resultStateListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResponceQuerisForScan : CxWSBasicRepsonse {
    
    private CxWSQueryVulnerabilityData[] queriesField;
    
    /// <remarks/>
    public CxWSQueryVulnerabilityData[] Queries {
        get {
            return this.queriesField;
        }
        set {
            this.queriesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResponseScansDisplayData : CxWSBasicRepsonse {
    
    private ScanDisplayData[] scanListField;
    
    /// <remarks/>
    public ScanDisplayData[] ScanList {
        get {
            return this.scanListField;
        }
        set {
            this.scanListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResponseProjectsDisplayData : CxWSBasicRepsonse {
    
    private ProjectDisplayData[] projectListField;
    
    /// <remarks/>
    public ProjectDisplayData[] projectList {
        get {
            return this.projectListField;
        }
        set {
            this.projectListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResponceResultPath : CxWSBasicRepsonse {
    
    private CxWSResultPath pathField;
    
    /// <remarks/>
    public CxWSResultPath Path {
        get {
            return this.pathField;
        }
        set {
            this.pathField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResponceScanResults : CxWSBasicRepsonse {
    
    private CxWSSingleResultData[] resultsField;
    
    /// <remarks/>
    public CxWSSingleResultData[] Results {
        get {
            return this.resultsField;
        }
        set {
            this.resultsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResponseRunID : CxWSBasicRepsonse {
    
    private long projectIDField;
    
    private string runIdField;
    
    /// <remarks/>
    public long ProjectID {
        get {
            return this.projectIDField;
        }
        set {
            this.projectIDField = value;
        }
    }
    
    /// <remarks/>
    public string RunId {
        get {
            return this.runIdField;
        }
        set {
            this.runIdField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResponseProjectConfig : CxWSBasicRepsonse {
    
    private ProjectConfiguration projectConfigField;
    
    private UserPermission permissionField;
    
    /// <remarks/>
    public ProjectConfiguration ProjectConfig {
        get {
            return this.projectConfigField;
        }
        set {
            this.projectConfigField = value;
        }
    }
    
    /// <remarks/>
    public UserPermission Permission {
        get {
            return this.permissionField;
        }
        set {
            this.permissionField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResponsePresetList : CxWSBasicRepsonse {
    
    private Preset[] presetListField;
    
    /// <remarks/>
    public Preset[] PresetList {
        get {
            return this.presetListField;
        }
        set {
            this.presetListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResponseQueryDescription : CxWSBasicRepsonse {
    
    private string queryDescriptionField;
    
    /// <remarks/>
    public string QueryDescription {
        get {
            return this.queryDescriptionField;
        }
        set {
            this.queryDescriptionField = value;
        }
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseLoginData))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResponseSessionID : CxWSBasicRepsonse {
    
    private string sessionIdField;
    
    /// <remarks/>
    public string SessionId {
        get {
            return this.sessionIdField;
        }
        set {
            this.sessionIdField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public partial class CxWSResponseLoginData : CxWSResponseSessionID {
    
    private string familyNameField;
    
    private string firstNameField;
    
    private string userNameField;
    
    private long userIDField;
    
    private int userPreferedLanguageLCIDField;
    
    private bool isAllowedToCreateProjectField;
    
    private bool isAllowedToChangeProjectField;
    
    private bool isAllowedToManageUsersField;
    
    private bool isAllowedToViewCompaniesField;
    
    private bool isAllowedToManageCompaniesField;
    
    private bool isAllowedToManageServerField;
    
    private bool isAllowedToViewInstallationDataField;
    
    private bool isAllowedToViewSpField;
    
    private bool isAllowedToManageSpField;
    
    private bool isScannerField;
    
    private bool isAuditorField;
    
    private bool isAllowedToManagePresetsField;
    
    private bool isAllowedToManagePredefinedCommandField;
    
    private bool isAllowedToManagePostScanActionField;
    
    private bool isAllowedToModifyResultDetailsField;
    
    private bool enableIncrementalScanField;
    
    private bool showSaaSPackageNotificationAndErrorsField;
    
    private bool showSaaSPackageDetailsField;
    
    private bool isAdviseChangePasswordField;
    
    /// <remarks/>
    public string FamilyName {
        get {
            return this.familyNameField;
        }
        set {
            this.familyNameField = value;
        }
    }
    
    /// <remarks/>
    public string FirstName {
        get {
            return this.firstNameField;
        }
        set {
            this.firstNameField = value;
        }
    }
    
    /// <remarks/>
    public string UserName {
        get {
            return this.userNameField;
        }
        set {
            this.userNameField = value;
        }
    }
    
    /// <remarks/>
    public long UserID {
        get {
            return this.userIDField;
        }
        set {
            this.userIDField = value;
        }
    }
    
    /// <remarks/>
    public int UserPreferedLanguageLCID {
        get {
            return this.userPreferedLanguageLCIDField;
        }
        set {
            this.userPreferedLanguageLCIDField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToCreateProject {
        get {
            return this.isAllowedToCreateProjectField;
        }
        set {
            this.isAllowedToCreateProjectField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToChangeProject {
        get {
            return this.isAllowedToChangeProjectField;
        }
        set {
            this.isAllowedToChangeProjectField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToManageUsers {
        get {
            return this.isAllowedToManageUsersField;
        }
        set {
            this.isAllowedToManageUsersField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToViewCompanies {
        get {
            return this.isAllowedToViewCompaniesField;
        }
        set {
            this.isAllowedToViewCompaniesField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToManageCompanies {
        get {
            return this.isAllowedToManageCompaniesField;
        }
        set {
            this.isAllowedToManageCompaniesField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToManageServer {
        get {
            return this.isAllowedToManageServerField;
        }
        set {
            this.isAllowedToManageServerField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToViewInstallationData {
        get {
            return this.isAllowedToViewInstallationDataField;
        }
        set {
            this.isAllowedToViewInstallationDataField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToViewSp {
        get {
            return this.isAllowedToViewSpField;
        }
        set {
            this.isAllowedToViewSpField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToManageSp {
        get {
            return this.isAllowedToManageSpField;
        }
        set {
            this.isAllowedToManageSpField = value;
        }
    }
    
    /// <remarks/>
    public bool IsScanner {
        get {
            return this.isScannerField;
        }
        set {
            this.isScannerField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAuditor {
        get {
            return this.isAuditorField;
        }
        set {
            this.isAuditorField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToManagePresets {
        get {
            return this.isAllowedToManagePresetsField;
        }
        set {
            this.isAllowedToManagePresetsField = value;
        }
    }
    
    /// <remarks/>
    public bool isAllowedToManagePredefinedCommand {
        get {
            return this.isAllowedToManagePredefinedCommandField;
        }
        set {
            this.isAllowedToManagePredefinedCommandField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToManagePostScanAction {
        get {
            return this.isAllowedToManagePostScanActionField;
        }
        set {
            this.isAllowedToManagePostScanActionField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToModifyResultDetails {
        get {
            return this.isAllowedToModifyResultDetailsField;
        }
        set {
            this.isAllowedToModifyResultDetailsField = value;
        }
    }
    
    /// <remarks/>
    public bool EnableIncrementalScan {
        get {
            return this.enableIncrementalScanField;
        }
        set {
            this.enableIncrementalScanField = value;
        }
    }
    
    /// <remarks/>
    public bool ShowSaaSPackageNotificationAndErrors {
        get {
            return this.showSaaSPackageNotificationAndErrorsField;
        }
        set {
            this.showSaaSPackageNotificationAndErrorsField = value;
        }
    }
    
    /// <remarks/>
    public bool ShowSaaSPackageDetails {
        get {
            return this.showSaaSPackageDetailsField;
        }
        set {
            this.showSaaSPackageDetailsField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAdviseChangePassword {
        get {
            return this.isAdviseChangePasswordField;
        }
        set {
            this.isAdviseChangePasswordField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/v7")]
public enum CxClientType {
    
    /// <remarks/>
    None,
    
    /// <remarks/>
    WebPortal,
    
    /// <remarks/>
    CLI,
    
    /// <remarks/>
    Eclipse,
    
    /// <remarks/>
    VS,
    
    /// <remarks/>
    InteliJ,
    
    /// <remarks/>
    Audit,
    
    /// <remarks/>
    SDK,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseLoginData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseLoginData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetQueryDescriptionCompletedEventHandler(object sender, GetQueryDescriptionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetQueryDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetQueryDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseQueryDescription Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseQueryDescription)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void VerifySupportedVersionCompletedEventHandler(object sender, VerifySupportedVersionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class VerifySupportedVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal VerifySupportedVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void LogoutCompletedEventHandler(object sender, LogoutCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void SsoLoginCompletedEventHandler(object sender, SsoLoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SsoLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SsoLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseLoginData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseLoginData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetPresetListCompletedEventHandler(object sender, GetPresetListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetPresetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetPresetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponsePresetList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponsePresetList)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetProjectConfigurationCompletedEventHandler(object sender, GetProjectConfigurationCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetProjectConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetProjectConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseProjectConfig Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseProjectConfig)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void RunScanAndAddToProjectCompletedEventHandler(object sender, RunScanAndAddToProjectCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RunScanAndAddToProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RunScanAndAddToProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseRunID Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseRunID)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void CreateAndRunProjectCompletedEventHandler(object sender, CreateAndRunProjectCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateAndRunProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateAndRunProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseRunID Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseRunID)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetResultsForQueryCompletedEventHandler(object sender, GetResultsForQueryCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetResultsForQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetResultsForQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponceScanResults Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponceScanResults)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetResultPathCompletedEventHandler(object sender, GetResultPathCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetResultPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetResultPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponceResultPath Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponceResultPath)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetProjectsDisplayDataCompletedEventHandler(object sender, GetProjectsDisplayDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetProjectsDisplayDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetProjectsDisplayDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseProjectsDisplayData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseProjectsDisplayData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScansDisplayDataCompletedEventHandler(object sender, GetScansDisplayDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScansDisplayDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScansDisplayDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScansDisplayData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScansDisplayData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetQueriesForScanCompletedEventHandler(object sender, GetQueriesForScanCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetQueriesForScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetQueriesForScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponceQuerisForScan Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponceQuerisForScan)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void SetFalsePositiveFlagCompletedEventHandler(object sender, SetFalsePositiveFlagCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SetFalsePositiveFlagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetFalsePositiveFlagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetResultStateListCompletedEventHandler(object sender, GetResultStateListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetResultStateListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetResultStateListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseResultStateList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseResultStateList)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetAllUsersCompletedEventHandler(object sender, GetAllUsersCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseUserData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseUserData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UpdateSetOfResultStateCompletedEventHandler(object sender, UpdateSetOfResultStateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateSetOfResultStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateSetOfResultStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UpdateResultStateCompletedEventHandler(object sender, UpdateResultStateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateResultStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateResultStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UpdateProjectIncrementalConfigurationCompletedEventHandler(object sender, UpdateProjectIncrementalConfigurationCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateProjectIncrementalConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateProjectIncrementalConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScansStatusesCompletedEventHandler(object sender, GetScansStatusesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScansStatusesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScansStatusesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScanStatusArray Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScanStatusArray)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void IsValidProjectNameCompletedEventHandler(object sender, IsValidProjectNameCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class IsValidProjectNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IsValidProjectNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetAssociatedGroupsListCompletedEventHandler(object sender, GetAssociatedGroupsListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAssociatedGroupsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAssociatedGroupsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseGroupList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseGroupList)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetConfigurationSetListCompletedEventHandler(object sender, GetConfigurationSetListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetConfigurationSetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetConfigurationSetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseConfigSetList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseConfigSetList)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void CancelScanCompletedEventHandler(object sender, CancelScanCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CancelScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CancelScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetStatusOfSingleScanCompletedEventHandler(object sender, GetStatusOfSingleScanCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetStatusOfSingleScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetStatusOfSingleScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScanStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScanStatus)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void CreateScanReportCompletedEventHandler(object sender, CreateScanReportCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateScanReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateScanReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSCreateReportResponse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSCreateReportResponse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScanReportStatusCompletedEventHandler(object sender, GetScanReportStatusCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScanReportStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScanReportStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSReportStatusResponse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSReportStatusResponse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScanReportCompletedEventHandler(object sender, GetScanReportCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScanReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScanReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScanResults Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScanResults)(this.results[0]));
        }
    }
}
}